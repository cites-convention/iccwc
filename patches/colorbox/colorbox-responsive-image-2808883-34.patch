diff --git a/README.txt b/README.txt
index 2d884e72770d02c63c749f061ad0a7850e0a2288..f4aa6b5c2143c54832bb41b1c91c49af4fa43c0a 100644
--- a/README.txt
+++ b/README.txt
@@ -123,6 +123,13 @@ Go to "Configuration" -> "Media" -> "Colorbox" and select "None" under
 Make any CSS adjustments to your "colorbox_mycolorbox.css" file.
 
 
+Use Responsive Images:
+----------------------
+Choose "Colorbox Responsive" as your image formatter.
+Standalone, only the content/trigger image can make use of responsive image styles.
+If you install the colorbox_inline module, responsive image styles will be available for the Colorbox image as well.
+Link: https://www.drupal.org/project/colorbox_inline
+
 Drush:
 ------
 A Drush command is provides for easy installation of the Colorbox plugin itself.
diff --git a/colorbox.module b/colorbox.module
index 9a9a29352fc414fd3fff1b0c53835429a9a08f72..f40b1e9be191e211eafeadd61ae0cc955d0f3217 100644
--- a/colorbox.module
+++ b/colorbox.module
@@ -42,5 +42,14 @@ function colorbox_theme() {
       ],
       'file' => 'colorbox.theme.inc',
     ],
+    'colorbox_responsive_formatter' => [
+      'variables' => [
+        'item' => NULL,
+        'item_attributes' => NULL,
+        'entity' => NULL,
+        'settings' => NULL,
+      ],
+      'file' => 'colorbox.theme.inc',
+    ],
   ];
 }
diff --git a/colorbox.theme.inc b/colorbox.theme.inc
index 30fa7a5c9666d451ffb5787a4209cd40996c04d5..97a96dba2cd747762bfaf1a4103b0001dc1f78ac 100644
--- a/colorbox.theme.inc
+++ b/colorbox.theme.inc
@@ -8,6 +8,8 @@
 use Drupal\file\Entity\File;
 use Drupal\image\Entity\ImageStyle;
 use Drupal\Component\Utility\Xss;
+use Drupal\responsive_image\Entity\ResponsiveImageStyle;
+
 /**
  * Prepares variables for colorbox formatter templates.
  *
@@ -20,12 +22,8 @@ use Drupal\Component\Utility\Xss;
  *     placed in the img tag.
  *   - entity: An entity object.
  *   - settings: Formatter settings array.
- *
- * @codingStandardsIgnoreStart
  */
 function template_preprocess_colorbox_formatter(&$variables) {
-  // @codingStandardsIgnoreEnd
-
   $item = $variables['item'];
   $item_attributes = $variables['item_attributes'] ?? [];
   $entity = $variables['entity'];
@@ -34,61 +32,6 @@ function template_preprocess_colorbox_formatter(&$variables) {
   $classes_array = ['colorbox'];
   $data_cbox_img_attrs = [];
 
-  // Build the caption.
-  $entity_title = $entity->label();
-  $entity_type = $entity->getEntityTypeId();
-
-  switch ($settings['colorbox_caption']) {
-    case 'auto':
-      // If the title is empty use alt or the entity title in that order.
-      if (!empty($item->title)) {
-        $caption = $item->title;
-      }
-      elseif (!empty($item->alt)) {
-        $caption = $item->alt;
-      }
-      elseif (!empty($entity_title)) {
-        $caption = $entity_title;
-      }
-      else {
-        $caption = '';
-      }
-      break;
-
-    case 'title':
-      $caption = $item->title;
-      break;
-
-    case 'alt':
-      $caption = $item->alt;
-      break;
-
-    case 'entity_title':
-      $caption = $entity_title;
-      break;
-
-    case 'custom':
-      $token_service = \Drupal::token();
-      $caption = $token_service->replace(
-        $settings['colorbox_caption_custom'],
-        [$entity_type => $entity, 'file' => $item],
-        ['clear' => TRUE]
-      );
-      break;
-
-    default:
-      $caption = '';
-  }
-
-  // Shorten the caption for the example styles or when caption
-  // shortening is active.
-  $config = \Drupal::config('colorbox.settings');
-  $colorbox_style = !empty($config->get('colorbox_style')) ? $config->get('colorbox_style') : '';
-  $trim_length = $config->get('colorbox_caption_trim_length');
-  if (((strpos($colorbox_style, 'colorbox/example') !== FALSE) || $config->get('colorbox_caption_trim')) && (strlen($caption) > $trim_length)) {
-    $caption = substr($caption, 0, $trim_length - 5) . '...';
-  }
-
   $gallery_id = \Drupal::service('colorbox.gallery_id_generator')->generateId($entity, $item, $settings);
 
   // Set up the $variables['image'] parameter.
@@ -135,6 +78,186 @@ function template_preprocess_colorbox_formatter(&$variables) {
     $variables['url'] = file_create_url($image_uri);
   }
 
+  $variables['attributes']['title'] = _colorbox_formatter_get_caption($variables);;
+  $variables['attributes']['data-colorbox-gallery'] = $gallery_id;
+  $variables['attributes']['class'] = $classes_array;
+  if (!empty($data_cbox_img_attrs)) {
+    $variables['attributes']['data-cbox-img-attrs'] = '{' . implode(',', $data_cbox_img_attrs) . '}';
+  }
+}
+
+/**
+ * Prepares variables for colorbox responsive formatter templates.
+ *
+ * Default template: colorbox-responsive-formatter.html.twig.
+ *
+ * @param array $variables
+ *   An associative array containing:
+ *   - item: An ImageItem object.
+ *   - item_attributes: An optional associative array of html attributes to be
+ *     placed in the img tag.
+ *   - entity: An entity object.
+ *   - settings: Formatter settings array.
+ */
+function template_preprocess_colorbox_responsive_formatter(&$variables) {
+  $colorbox_inline = \Drupal::moduleHandler()->moduleExists('colorbox_inline');
+
+  $item = $variables['item'];
+  $item_attributes = isset($variables['item_attributes']) ? $variables['item_attributes'] : [];
+  $entity = $variables['entity'];
+  $entity_bundle = $entity->bundle();
+  $id = $entity->id();
+  $entity_id = !empty($id) ? $entity_bundle . '-' . $id : 'entity-id';
+
+  $settings = $variables['settings'];
+  $image_uri = $item->entity->getFileUri();
+  $classes_array = ['colorbox'];
+  $data_cbox_img_attrs = [];
+
+  $responsive_style = NULL;
+  if (!empty($settings['colorbox_responsive_node_style'])) {
+    $responsive_style = ResponsiveImageStyle::load($settings['colorbox_responsive_node_style']);
+  }
+
+  // Set up the $variables['responsive_image'] parameter.
+  if ($settings['colorbox_responsive_node_style'] == 'hide') {
+    $variables['responsive_image'] = [];
+    $classes_array[] = 'js-hide';
+  }
+  elseif ($responsive_style) {
+    $variables['responsive_image'] = [
+      '#theme' => 'responsive_image',
+      '#responsive_image_style_id' => $settings['colorbox_responsive_node_style'],
+    ];
+  }
+  else {
+    $variables['responsive_image'] = [
+      '#theme' => 'image',
+    ];
+  }
+
+  if (!empty($variables['responsive_image'])) {
+    $attributes = [];
+    // Do not output an empty 'title' attribute.
+    if (mb_strlen($item->title) != 0) {
+      $variables['responsive_image']['#title'] = $item->title;
+      $data_cbox_img_attrs['title'] = '"title":"' . $item->title . '"';
+      $attributes['title'] = $item->title;
+    }
+
+    foreach (['width', 'height', 'alt'] as $key) {
+      $variables['responsive_image']["#$key"] = $item->$key;
+    }
+    $data_cbox_img_attrs['alt'] = '"alt":"' . $item->alt . '"';
+    $attributes['alt'] = $item->alt;
+
+    $variables['responsive_image']['#uri'] = empty($item->uri) ? $image_uri : $item->uri;
+    $variables['responsive_image']['#attributes'] = $attributes + $item_attributes;
+  }
+
+  //   $variables['responsive_image'] = $variables['image_id'] = '';
+  $responsive_style = NULL;
+  if (!empty($settings['colorbox_responsive_image_style'])) {
+    $responsive_style = ResponsiveImageStyle::load($settings['colorbox_responsive_image_style']);
+  }
+
+  // Since responsive images don't have an external url, link to internal content.
+  if ($colorbox_inline && $responsive_style) {
+    // Create a unique internal link for the picture tag.
+    // We use a short token since randomness is not critical.
+    $image_id = $entity_id . '-' . Crypt::randomBytesBase64(8);
+    $variables['image_id'] = $image_id;
+    $variables['url'] = '';
+    $variables['responsive_image'] = [
+      '#theme' => 'responsive_image',
+      '#responsive_image_style_id' => $settings['colorbox_responsive_image_style'],
+      '#uri' => empty($item->uri) ? $image_uri : $item->uri,
+      '#width' => $item->width,
+      '#height' => $item->height,
+    ];
+    $variables['attributes']['data-colorbox-inline'] = '#' . $image_id;
+  }if (!empty($settings['colorbox_image_style'])) {
+    $style = ImageStyle::load($settings['colorbox_image_style']);
+    $variables['url'] = $style->buildUrl($image_uri);
+  }
+  else {
+    $variables['url'] = file_create_url($image_uri);
+  }
+
+  $gallery_id = \Drupal::service('colorbox.gallery_id_generator')->generateId($entity, $item, $settings);
+
+  $variables['attributes']['title'] = _colorbox_formatter_get_caption($variables);
+  $variables['attributes']['data-colorbox-gallery'] = $gallery_id;
+  $variables['attributes']['class'] = $classes_array;
+  if (!empty($data_cbox_img_attrs)) {
+    $variables['attributes']['data-cbox-img-attrs'] = '{' . implode(',', $data_cbox_img_attrs) . '}';
+  }
+}
+
+/**
+ * Get the caption for an image.
+ *
+ * @param array $variables
+ *   An associative array containing:
+ *   - item: An ImageItem object.
+ *   - item_attributes: An optional associative array of html attributes to be
+ *     placed in the img tag.
+ *   - entity: An entity object.
+ *   - settings: Formatter settings array.
+ *
+ * @return string
+ */
+function _colorbox_formatter_get_caption(&$variables) {
+  $item = $variables['item'];
+  $entity = $variables['entity'];
+  $settings = $variables['settings'];
+
+  // Build the caption.
+  $entity_title = $entity->label();
+  $entity_type = $entity->getEntityTypeId();
+
+  switch ($settings['colorbox_caption']) {
+    case 'auto':
+      // If the title is empty use alt or the entity title in that order.
+      if (!empty($item->title)) {
+        $caption = $item->title;
+      }
+      elseif (!empty($item->alt)) {
+        $caption = $item->alt;
+      }
+      elseif (!empty($entity_title)) {
+        $caption = $entity_title;
+      }
+      else {
+        $caption = '';
+      }
+      break;
+
+    case 'title':
+      $caption = $item->title;
+      break;
+
+    case 'alt':
+      $caption = $item->alt;
+      break;
+
+    case 'entity_title':
+      $caption = $entity_title;
+      break;
+
+    case 'custom':
+      $token_service = \Drupal::token();
+      $caption = $token_service->replace(
+        $settings['colorbox_caption_custom'],
+        [$entity_type => $entity, 'file' => $item],
+        ['clear' => TRUE]
+      );
+      break;
+
+    default:
+      $caption = '';
+  }
+
   // If File Entity module is enabled, load attribute values from file entity.
   if (\Drupal::moduleHandler()->moduleExists('file_entity')) {
     // File id of the save file.
@@ -152,10 +275,14 @@ function template_preprocess_colorbox_formatter(&$variables) {
     }
   }
 
-  $variables['attributes']['title'] = Xss::filter($caption);
-  $variables['attributes']['data-colorbox-gallery'] = $gallery_id;
-  $variables['attributes']['class'] = $classes_array;
-  if (!empty($data_cbox_img_attrs)) {
-    $variables['attributes']['data-cbox-img-attrs'] = '{' . implode(',', $data_cbox_img_attrs) . '}';
+  // Shorten the caption for the example styles or when caption
+  // shortening is active.
+  $config = \Drupal::config('colorbox.settings');
+  $colorbox_style = $config->get('colorbox_style');
+  $trim_length = $config->get('colorbox_caption_trim_length');
+  if (((strpos($colorbox_style, 'colorbox/example') !== FALSE) || $config->get('colorbox_caption_trim')) && (mb_strlen($caption) > $trim_length)) {
+    $caption = mb_substr($caption, 0, $trim_length - 5) . '...';
   }
+
+  return Xss::filter($caption);
 }
diff --git a/src/Plugin/Field/FieldFormatter/ColorboxResponsiveFormatter.php b/src/Plugin/Field/FieldFormatter/ColorboxResponsiveFormatter.php
new file mode 100644
index 0000000000000000000000000000000000000000..d6e40230f7ad4c9c85dc079c0621c28052ed9e4d
--- /dev/null
+++ b/src/Plugin/Field/FieldFormatter/ColorboxResponsiveFormatter.php
@@ -0,0 +1,457 @@
+<?php
+
+namespace Drupal\colorbox\Plugin\Field\FieldFormatter;
+
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Link;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Url;
+use Drupal\image\Entity\ImageStyle;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Cache\Cache;
+use Drupal\colorbox\ElementAttachmentInterface;
+use Drupal\image\Plugin\Field\FieldFormatter\ImageFormatterBase;
+use Drupal\responsive_image\Entity\ResponsiveImageStyle;
+// use Drupal\Core\Utility\LinkGeneratorInterface;
+
+/**
+ * Plugin for responsive image formatter.
+ *
+ * @FieldFormatter(
+ *   id = "colorbox_responsive",
+ *   module = "colorbox",
+ *   label = @Translation("Colorbox Responsive"),
+ *   field_types = {
+ *     "image",
+ *   },
+ * )
+ */
+class ColorboxResponsiveFormatter extends ImageFormatterBase implements ContainerFactoryPluginInterface {
+
+  /**
+   * The current user.
+   *
+   * @var \Drupal\Core\Session\AccountInterface
+   */
+  protected $currentUser;
+
+  /**
+   * @var EntityStorageInterface
+   */
+  protected $responsiveImageStyleStorage;
+
+  /*
+   * The image style entity storage.
+   *
+   * @var \Drupal\image\ImageStyleStorageInterface
+   */
+  protected $imageStyleStorage;
+
+  /**
+   * Drupal\Core\Extension\ModuleHandlerInterface definition.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  private $moduleHandler;
+
+  /**
+   * Constructs a ColorboxResponsiveFormatter object.
+   *
+   * @param string $plugin_id
+   *   The plugin_id for the formatter.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   *   The definition of the field to which the formatter is associated.
+   * @param array $settings
+   *   The formatter settings.
+   * @param string $label
+   *   The formatter label display setting.
+   * @param string $view_mode
+   *   The view mode.
+   * @param array $third_party_settings
+   *   Any third party settings.
+   * @param \Drupal\Core\Session\AccountInterface $current_user
+   *   The current user.
+   * @param \Drupal\Core\Entity\EntityStorageInterface $responsive_image_style_storage
+   *   The responsive image style storage.
+   * @param \Drupal\Core\Entity\EntityStorageInterface $image_style_storage
+   *   The image style storage.
+   * @param \Drupal\colorbox\ElementAttachmentInterface $attachment
+   *   Allow the library to be attached to the page.
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   *   Module handler services.
+   */
+  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, EntityStorageInterface $responsive_image_style_storage, EntityStorageInterface $image_style_storage, ElementAttachmentInterface $attachment, ModuleHandlerInterface $moduleHandler) {
+    parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $label, $view_mode, $third_party_settings);
+    $this->currentUser = $current_user;
+    $this->responsiveImageStyleStorage = $responsive_image_style_storage;
+    $this->imageStyleStorage = $image_style_storage;
+    $this->attachment = $attachment;
+    $this->moduleHandler = $moduleHandler;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $plugin_id,
+      $plugin_definition,
+      $configuration['field_definition'],
+      $configuration['settings'],
+      $configuration['label'],
+      $configuration['view_mode'],
+      $configuration['third_party_settings'],
+      $container->get('current_user'),
+      $container->get('entity_type.manager')->getStorage('responsive_image_style'),
+      $container->get('entity_type.manager')->getStorage('image_style'),
+      $container->get('colorbox.attachment'),
+      $container->get('module_handler')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function defaultSettings() {
+    return [
+      'colorbox_responsive_node_style' => '',
+      'colorbox_image_style' => '',
+      'colorbox_responsive_image_style' => '',
+      'colorbox_gallery' => 'post',
+      'colorbox_gallery_custom' => '',
+      'colorbox_caption' => 'auto',
+      'colorbox_caption_custom' => '',
+      ] + parent::defaultSettings();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsForm(array $form, FormStateInterface $form_state) {
+    $image_styles = image_style_options(FALSE);
+    $description_link = Link::fromTextAndUrl(
+      $this->t('Configure Image Styles'),
+      Url::fromRoute('entity.image_style.collection')
+    );
+    $responsive_image_options = [];
+    $responsive_image_styles = $this->responsiveImageStyleStorage->loadMultiple();
+    if ($responsive_image_styles && !empty($responsive_image_styles)) {
+      foreach ($responsive_image_styles as $machine_name => $responsive_image_style) {
+        if ($responsive_image_style->hasImageStyleMappings()) {
+          $responsive_image_options[$machine_name] = $responsive_image_style->label();
+        }
+      }
+    }
+
+    $element['colorbox_responsive_node_style'] = [
+      '#title' => $this->t('Responsive image style for content'),
+      '#type' => 'select',
+      '#default_value' => $this->getSetting('colorbox_responsive_node_style'),
+      '#required' => TRUE,
+      '#options' => $responsive_image_options,
+      '#description' => [
+        // '#markup' => $this->linkGenerator->generate($this->t('Configure Responsive Image Styles'), new Url('entity.responsive_image_style.collection')),
+        '#access' => $this->currentUser->hasPermission('administer responsive image styles'),
+      ],
+    ];
+    $element['colorbox_image_style'] = [
+      '#title' => $this->t('Image style for Colorbox'),
+      '#type' => 'select',
+      '#default_value' => $this->getSetting('colorbox_image_style'),
+      '#empty_option' => $this->t('None (original image)'),
+      '#options' => $image_styles,
+      '#description' => $description_link->toRenderable() + [
+        '#access' => $this->currentUser->hasPermission('administer image styles'),
+      ],
+    ];
+    $element['colorbox_responsive_image_style'] = [
+      '#title' => $this->t('Responsive image style for Colorbox'),
+      '#type' => 'select',
+      '#default_value' => $this->getSetting('colorbox_responsive_image_style'),
+      '#required' => TRUE,
+      '#options' => $responsive_image_options,
+      '#description' => [
+        // '#markup' => $this->linkGenerator->generate($this->t('Configure Responsive Image Styles'), new Url('entity.responsive_image_style.collection')),
+        '#access' => $this->currentUser->hasPermission('administer responsive image styles'),
+      ],
+    ];
+
+    $gallery = [
+      'post' => $this->t('Per post gallery'),
+      'page' => $this->t('Per page gallery'),
+      'field_post' => $this->t('Per field in post gallery'),
+      'field_page' => $this->t('Per field in page gallery'),
+      'custom' => $this->t('Custom (with tokens)'),
+      'none' => $this->t('No gallery'),
+    ];
+    $element['colorbox_gallery'] = [
+      '#title' => $this->t('Gallery (image grouping)'),
+      '#type' => 'select',
+      '#default_value' => $this->getSetting('colorbox_gallery'),
+      '#options' => $gallery,
+      '#description' => $this->t('How Colorbox should group the image galleries.'),
+    ];
+    $element['colorbox_gallery_custom'] = [
+      '#title' => $this->t('Custom gallery'),
+      '#type' => 'textfield',
+      '#default_value' => $this->getSetting('colorbox_gallery_custom'),
+      '#description' => $this->t('All images on a page with the same gallery value (rel attribute) will be grouped together. It must only contain lowercase letters, numbers, and underscores.'),
+      '#required' => FALSE,
+      '#states' => [
+        'visible' => [
+          ':input[name$="[settings_edit_form][settings][colorbox_gallery]"]' => ['value' => 'custom'],
+        ],
+      ],
+    ];
+    if ($this->moduleHandler->moduleExists('token')) {
+
+      $entity_type = '';
+
+      if (isset($form['#entity_type']) && !empty($form['#entity_type'])) {
+        $entity_type = $form['#entity_type'];
+      }
+
+      $element['colorbox_token_gallery'] = [
+        '#type' => 'fieldset',
+        '#title' => $this->t('Replacement patterns'),
+        '#theme' => 'token_tree_link',
+        '#token_types' => [$entity_type, 'file'],
+        '#states' => [
+          'visible' => [
+            ':input[name$="[settings_edit_form][settings][colorbox_gallery]"]' => ['value' => 'custom'],
+          ],
+        ],
+      ];
+    }
+    else {
+      $element['colorbox_token_gallery'] = [
+        '#type' => 'fieldset',
+        '#title' => $this->t('Replacement patterns'),
+        '#description' => '<strong class="error">' . $this->t('For token support the <a href="@token_url">token module</a> must be installed.', ['@token_url' => 'http://drupal.org/project/token']) . '</strong>',
+        '#states' => [
+          'visible' => [
+            ':input[name$="[settings_edit_form][settings][colorbox_gallery]"]' => ['value' => 'custom'],
+          ],
+        ],
+      ];
+    }
+
+    $caption = [
+      'auto' => $this->t('Automatic'),
+      'title' => $this->t('Title text'),
+      'alt' => $this->t('Alt text'),
+      'entity_title' => $this->t('Content title'),
+      'custom' => $this->t('Custom (with tokens)'),
+      'none' => $this->t('None'),
+    ];
+    $element['colorbox_caption'] = [
+      '#title' => $this->t('Caption'),
+      '#type' => 'select',
+      '#default_value' => $this->getSetting('colorbox_caption'),
+      '#options' => $caption,
+      '#description' => $this->t('Automatic will use the first non-empty value out of the title, the alt text and the content title.'),
+    ];
+    $element['colorbox_caption_custom'] = [
+      '#title' => $this->t('Custom caption'),
+      '#type' => 'textfield',
+      '#default_value' => $this->getSetting('colorbox_caption_custom'),
+      '#states' => [
+        'visible' => [
+          ':input[name$="[settings_edit_form][settings][colorbox_caption]"]' => ['value' => 'custom'],
+        ],
+      ],
+    ];
+    if ($this->moduleHandler->moduleExists('token')) {
+
+      $entity_type = '';
+
+      if (isset($form['#entity_type']) && !empty($form['#entity_type'])) {
+        $entity_type = $form['#entity_type'];
+      }
+
+      $element['colorbox_token_caption'] = [
+        '#type' => 'fieldset',
+        '#title' => $this->t('Replacement patterns'),
+        '#theme' => 'token_tree_link',
+        '#token_types' => [$entity_type, 'file'],
+        '#states' => [
+          'visible' => [
+            ':input[name$="[settings_edit_form][settings][colorbox_caption]"]' => ['value' => 'custom'],
+          ],
+        ],
+      ];
+    }
+    else {
+      $element['colorbox_token_caption'] = [
+        '#type' => 'fieldset',
+        '#title' => $this->t('Replacement patterns'),
+        '#description' => '<strong class="error">' . $this->t('For token support the <a href="@token_url">token module</a> must be installed.', ['@token_url' => 'http://drupal.org/project/token']) . '</strong>',
+        '#states' => [
+          'visible' => [
+            ':input[name$="[settings_edit_form][settings][colorbox_caption]"]' => ['value' => 'custom'],
+          ],
+        ],
+      ];
+    }
+
+    return $element;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsSummary() {
+    $summary = [];
+    $image_styles = image_style_options(FALSE);
+    // Unset possible 'No defined styles' option.
+    unset($image_styles['']);
+    // Styles could be lost because of enabled/disabled modules that defines
+    // their styles in code.
+
+    $responsive_image_styles = $this->responsiveImageStyleStorage->loadMultiple();
+
+    if (isset($responsive_image_styles[$this->getSetting('colorbox_responsive_node_style')])) {
+      $summary[] = $this->t('Responsive content image style: @style', ['@style' => $responsive_image_styles[$this->getSetting('colorbox_responsive_node_style')]->label()]);
+    }
+    // elseif ($this->getSetting('colorbox_responsive_node_style') == 'hide') {
+    //   $summary[] = $this->t('Responsive content image style: Hide');
+    // }
+    else {
+      $summary[] = $this->t('Responsive content image style: Original image');
+    }
+
+    if (isset($image_styles[$this->getSetting('colorbox_image_style')])) {
+      $summary[] = $this->t('Colorbox image style: @style', ['@style' => $image_styles[$this->getSetting('colorbox_image_style')]]);
+    }
+
+    if (isset($responsive_image_styles[$this->getSetting('colorbox_responsive_image_style')])) {
+      $summary[] = $this->t('Colorbox responsive image style: @style', ['@style' => $responsive_image_styles[$this->getSetting('colorbox_responsive_image_style')]->label()]);
+    }
+    else {
+      $summary[] = $this->t('Colorbox responsive image style: Original image');
+    }
+
+    $gallery = [
+      'post' => $this->t('Per post gallery'),
+      'page' => $this->t('Per page gallery'),
+      'field_post' => $this->t('Per field in post gallery'),
+      'field_page' => $this->t('Per field in page gallery'),
+      'custom' => $this->t('Custom (with tokens)'),
+      'none' => $this->t('No gallery'),
+    ];
+    if ($this->getSetting('colorbox_gallery')) {
+      $summary[] = $this->t('Colorbox gallery type: @type', ['@type' => $gallery[$this->getSetting('colorbox_gallery')]]) . ($this->getSetting('colorbox_gallery') == 'custom' ? ' (' . $this->getSetting('colorbox_gallery_custom') . ')' : '');
+    }
+
+    $caption = [
+      'auto' => $this->t('Automatic'),
+      'title' => $this->t('Title text'),
+      'alt' => $this->t('Alt text'),
+      'entity_title' => $this->t('Content title'),
+      'custom' => $this->t('Custom (with tokens)'),
+      'none' => $this->t('None'),
+    ];
+
+    if ($this->getSetting('colorbox_caption')) {
+      $summary[] = $this->t('Colorbox caption: @type', ['@type' => $caption[$this->getSetting('colorbox_caption')]]);
+    }
+
+    return $summary;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function viewElements(FieldItemListInterface $items, $langcode) {
+    $elements = [];
+    $settings = $this->getSettings();
+    $files = $this->getEntitiesToView($items, $langcode);
+
+    // Early opt-out if the field is empty.
+    if (empty($files)) {
+      return $elements;
+    }
+
+    // Collect cache tags to be added for each item in the field.
+    $responsive_image_style = $this->responsiveImageStyleStorage->load($this->getSetting('colorbox_responsive_node_style'));
+    $image_styles_to_load = [];
+    $cache_tags = [];
+    if ($responsive_image_style) {
+      $cache_tags = Cache::mergeTags($cache_tags, $responsive_image_style->getCacheTags());
+      $image_styles_to_load = $responsive_image_style->getImageStyleIds();
+    }
+
+    $image_styles = $this->imageStyleStorage->loadMultiple($image_styles_to_load);
+    foreach ($image_styles as $image_style) {
+      $cache_tags = Cache::mergeTags($cache_tags, $image_style->getCacheTags());
+    }
+
+    foreach ($files as $delta => $file) {
+      $settings['style_name'] = $settings['colorbox_responsive_node_style'];
+      $cache_tags = Cache::mergeTags($cache_tags, $file->getCacheTags());
+
+      // Extract field item attributes for the theme function, and unset them
+      // from the $item so that the field template does not re-render them.
+      $item = $file->_referringItem;
+      $item_attributes = $item->_attributes;
+      unset($item->_attributes);
+
+      $elements[$delta] = [
+        '#theme' => 'colorbox_responsive_formatter',
+        '#item' => $item,
+        '#item_attributes' => $item_attributes,
+        '#entity' => $items->getEntity(),
+        '#settings' => $settings,
+        '#cache' => [
+          'tags' => $cache_tags,
+        ],
+      ];
+    }
+
+    // Attach the Colorbox JS and CSS.
+    if ($this->attachment->isApplicable()) {
+      $this->attachment->attach($elements);
+    }
+
+    return $elements;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function calculateDependencies() {
+    $dependencies = parent::calculateDependencies();
+    $style_ids = [];
+    $style_ids[] = $this->getSetting('colorbox_responsive_node_style');
+    $style_ids[] = $this->getSetting('colorbox_responsive_image_style');
+    $style_ids[] = $this->getSetting('colorbox_image_style');
+    /** @var \Drupal\image\ImageStyleInterface $style */
+    foreach ($style_ids as $style_id) {
+      if ($style_id && $style = ResponsiveImageStyle::load($style_id)) {
+        // Add the responsive image style as dependency.
+        $dependencies[$style->getConfigDependencyKey()][] = $style->getConfigDependencyName();
+      }
+      if ($style_id && $style = ImageStyle::load($style_id)) {
+        // Add the responsive image style as dependency.
+        $dependencies[$style->getConfigDependencyKey()][] = $style->getConfigDependencyName();
+      }
+    }
+
+    return $dependencies;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function isApplicable(FieldDefinitionInterface $field_definition) {
+    return \Drupal::moduleHandler()->moduleExists('responsive_image');
+  }
+
+}
diff --git a/templates/colorbox-responsive-formatter.html.twig b/templates/colorbox-responsive-formatter.html.twig
new file mode 100644
index 0000000000000000000000000000000000000000..8bec870d02aa155020a4b2d485701e7b538cffbb
--- /dev/null
+++ b/templates/colorbox-responsive-formatter.html.twig
@@ -0,0 +1,17 @@
+{#
+/**
+ * @file
+ * Default theme implementation to display a formatted colorbox image field.
+ *
+ * Available variables:
+ * - responsive_image: A collection of responsive image data.
+ * - url: An URL the image can be linked to.
+ * - attributes: Link attributes.
+ *
+ * @see template_preprocess_colorbox_responsive_formatter()
+ *
+ * @ingroup themeable
+ */
+#}
+
+<a href="{{ url }}"{{ attributes }}>{{ responsive_image }}</a>
