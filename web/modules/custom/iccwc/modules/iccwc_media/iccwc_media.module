<?php

/**
 * @file
 * The ICCWC Media module.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\RemoveCommand;

/**
 * Implements hook_field_widget_form_alter().
 *
 * @see media_library_edit_field_widget_form_alter()
 */
function iccwc_media_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $plugin_id = $context['widget']->getPluginId();
  $language = \Drupal::languageManager()->getCurrentLanguage();

  // Add translate link to media items.
  if ($plugin_id == 'media_library_widget') {
    $settings = $context['widget']->getThirdPartySettings('media_library_edit');
    if (isset($settings['show_edit']) && $settings['show_edit']) {
      if (isset($context['items'])) {
        // Gets the first referenced entity.
        // Doesn't matter which one, we just need the media edit template.
        /** @var \Drupal\media\MediaInterface $media */
        $media = $context['items']->entity;
        if (empty($media) || !content_translation_translate_access($media)) {
          return;
        }

        foreach (Element::children($element['selection']) as $key) {
          if ($media->hasTranslation($language->getId())) {
            continue;
          }

          $translate_url = $media->toUrl('drupal:content-translation-add');
          $translate_url->setRouteParameter('source', $media->language()->getId());
          $translate_url->setRouteParameter('target', $language->getId());

          $edit_url_query_params = [
            'media_library_translate' => 'ajax',
          ];
          $translate_url->setOption('query', $edit_url_query_params);

          $translate_button = $element['selection'][$key]['media_edit'];
          $translate_button['#title'] = t('Translate media item');
          $translate_button['#url'] = $translate_url;
          $translate_button['#attributes']['title'] = t('Translate');
          $translate_button['#attributes']['class'][] = 'media-library-translate__link';
          $element['selection'][$key]['media_translate'] = $translate_button;
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function iccwc_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // When we are on a media translate route using AJAX,
  // change the callback to an AJAX callback.
  if (\Drupal::request()->query->get('media_library_translate') === 'ajax') {
    $form['actions']['submit']['#ajax'] = [
      'callback' => '_iccwc_media_media_translate_save',
      'event' => 'click',
      'disable-refocus' => TRUE,
    ];
  }
}

/**
 * Callback for AJAX media translate.
 *
 * @see _media_library_edit_media_edit_save()
 */
function _iccwc_media_media_translate_save(array &$form, FormStateInterface $form_state) {
  $response = _media_library_edit_media_edit_save($form, $form_state);
  if (!$form_state->hasAnyErrors()) {
    // Hide the "Add translation" link after adding the translation.
    $response->addCommand(new RemoveCommand('.media-library-translate__link'));
  }
  return $response;
}
