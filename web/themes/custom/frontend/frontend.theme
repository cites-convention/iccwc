<?php

use Drupal\Core\Serialization\Yaml;
use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
use Drupal\Core\Asset\Exception\InvalidLibraryFileException;
use Drupal\node\NodeInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_library_info_alter().
 */
function frontend_library_info_alter(&$libraries, $extension) {
  $theme_name = basename(__FILE__, '.theme');
  $theme_path = \Drupal::service('extension.list.theme')->getPath($theme_name);

  if ($extension == $theme_name) {
    $directory_iterator = new RecursiveDirectoryIterator($theme_path . '/templates/components/');

    foreach (new RecursiveIteratorIterator($directory_iterator) as $file) {
      if ($file->getFilename() == 'libraries.yml') {
        try {
          $componentPathFromRoot = substr($file->getPathName(), 0, -13);
          $componentPathFromTheme = str_replace($theme_path . '/', '', $componentPathFromRoot);
          $new_libraries = Yaml::decode(file_get_contents($file->getRealPath()));

          foreach ($new_libraries as $key => $new_library) {
            if (isset($libraries[$key])) {
              \Drupal::messenger()
                ->addWarning(t('The library @key from the theme @themename has multiple definitions.', [
                  '@key' => $key,
                  '@themename' => $theme_name,
                ]));
            }
            else {
              if (isset($new_library['css'])) {
                foreach ($new_library['css'] as $group_key => $css_grouped) {
                  foreach ($css_grouped as $file_key => $css_file) {
                    if (substr($file_key, 0, 13) == 'css/templates') {
                      // Path is absolutely defined (deprecated, but as default assumed by Drupal)
                      // $new_library['css'][$group_key][$file_key] = $css_file.
                    }
                    else {
                      if (isset($css_file['type'])) {
                        if ($css_file['type'] == 'external') {
                          continue;
                        }
                      }

                      // Path is relatively defined.
                      $new_library['css'][$group_key][$componentPathFromTheme . $file_key] = $css_file;
                      unset($new_library['css'][$group_key][$file_key]);
                    }
                  }
                }
              }

              if (isset($new_library['js'])) {
                foreach ($new_library['js'] as $file_key => $js_file) {
                  if (substr($file_key, 0, 11) == '/templates/components') {
                    // Path is absolutely defined (deprecated, but as default assumed by Drupal).
                  }
                  else {
                    if (isset($js_file['type'])) {
                      if ($js_file['type'] == 'external') {
                        continue;
                      }
                    }

                    // Path is relatively defined.
                    $new_library['js'][$componentPathFromTheme . $file_key] = $js_file;
                    unset($new_library['js'][$file_key]);
                  }
                }
              }

              $libraries[$key] = $new_library;
            }
          }
        }
        catch (InvalidDataTypeException $e) {
          // Rethrow a more helpful exception to provide context.
          throw new InvalidLibraryFileException(sprintf('Invalid library definition in %s: %s', $file->getRealPath(), $e->getMessage()), 0, $e);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for block__system_branding_block.
 */
function frontend_preprocess_block__system_branding_block(&$variables) {
  $variables['#cache']['contexts'][] = 'languages';

  $language = \Drupal::languageManager()->getCurrentLanguage();
  $langcode = $language->getId();
  $logo = "logo-$langcode.svg";

  $theme_path = \Drupal::service('extension.list.theme')->getPath('frontend');
  $logo = "$theme_path/$logo";
  $variables['site_logo'] = file_get_contents($logo);
}

/**
 * Implements hook_preprocess_page_title().
 */
function frontend_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();
  $node = $route_match->getParameter('node');
  if ($node instanceof NodeInterface
    && $node->hasField('field_banner_image')
    && !$node->get('field_banner_image')->isEmpty()
  ) {
    $variables['title'] = NULL;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function frontend_preprocess_page(&$variables) {
  $route_match = \Drupal::routeMatch();
  $node = $route_match->getParameter('node');

  if ($node instanceof NodeInterface
    && $node->hasField('layout_builder__layout')) {
    $variables['is_layout_page'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_blb_section().
 */
function frontend_preprocess_blb_section(&$variables) {
  return;
  $empty_section = TRUE;

  foreach (range(1, 12) as $i) {
    if (empty($variables['content']["blb_region_col_$i"])) {
      continue;
    }

    foreach (Element::children($variables['content']["blb_region_col_$i"]) as $key) {
      $empty_region = TRUE;
      foreach (Element::children($variables['content']["blb_region_col_$i"][$key]) as $block_key) {
        if (!empty($variables['content']["blb_region_col_$i"][$key][$block_key])) {
          $empty_section = FALSE;
          $empty_region = FALSE;
          break;
        }
      }

      if ($empty_region) {
        $variables['region_attributes']["blb_region_col_$i"]['class'][] = 'empty-region';
      }
    }
  }

  if ($empty_section) {
    $variables['content'] = NULL;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function frontend_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  $variables['page'] = ($variables['view_mode'] == 'full' && (node_is_page($node)) || (isset($node->in_preview) && in_array($node->preview_view_mode, ['full', 'default'])));
}

/**
 * Implements hook_preprocess_HOOK() for field__block_content__field_tabs.
 */
function frontend_preprocess_field__block_content__field_tabs(&$variables) {
  $titles = [];

  foreach ($variables['items'] as $tab) {
    $titles[] = $tab['content']['#paragraph']->get('field_title')->value;
  }

  $variables['titles'] = $titles;
}
